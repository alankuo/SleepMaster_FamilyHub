{"version":3,"sources":["img/logo.png","serviceWorker.js","components/NavBar.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","homeVal","_this2","react_default","a","createElement","className","type","data-toggle","data-target","aria-expanded","aria-controls","src","logo","alt","style","width","id","margin","Link","to","onClick","updateValue","profileVal","chatVal","React","Component","ReactDOM","render","BrowserRouter","NavBar_NavBar","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4KCYpBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sICdeC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGDQ,MAAQ,CACXC,QAAQ,IALOR,wEAWX,IAAAS,EAAAN,KACN,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASD,UAAU,0BAA0BE,cAAY,WAAWC,cAAY,UAAUC,gBAAc,QAAQC,gBAAc,UACzIR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,qBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAElBH,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMC,IAAI,GAAGC,MAAO,CAACC,MAAM,UAEvCb,EAAAC,EAAAC,cAAA,OAAKY,GAAG,SAASX,UAAU,4BACzBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAWV,KAAKI,MAAMC,QAASc,MAAO,CAACG,OAAO,SAASf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,IAAIC,QAAS,WAAOnB,EAAKoB,YAAY,MAA9C,SAC3DnB,EAAAC,EAAAC,cAAA,MAAIC,UAAWV,KAAKI,MAAMuB,YAAYpB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,UAAUC,QAAS,WAAOnB,EAAKoB,YAAY,aAApD,iBACtCnB,EAAAC,EAAAC,cAAA,MAAIC,UAAWV,KAAKI,MAAMwB,SAASrB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,OAAOC,QAAS,WAAOnB,EAAKoB,YAAY,cAAjD,aACnCnB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,QAAQC,QAAS,WAAOnB,EAAKoB,YAAY,YAAlD,sBA9BkBG,IAAMC,WCG1CC,IAASC,OACPzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACE1B,EAAAC,EAAAC,cAACyB,EAAD,OAEJC,SAASC,eAAe,SFsHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fe012562.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.096d31e8.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport logo from \"../img/logo.png\"\n\nexport default class NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Initial state\n    this.state = {\n      homeVal:\"\",\n    };\n\n    // Bind all functions so they can refer to \"this\" correctly\n    //this.updateValue = this.updateValue.bind(this);\n  }\n  render(){\n    return (\n      <nav className=\"navbar navbar-default navbar-fixed-top\">\n        <div className=\"container\">\n          <div className=\"navbar-header\">\n            <button type=\"button\" className=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n              <span className=\"sr-only\">Toggle navigation</span>\n              <span className=\"icon-bar\"></span>\n              <span className=\"icon-bar\"></span>\n              <span className=\"icon-bar\"></span>\n            </button>\n            <img src={logo} alt=\"\" style={{width:30+'%'}}/>\n          </div>\n          <div id=\"navbar\" className=\"collapse navbar-collapse\">\n            <ul className=\"nav navbar-nav navbar-right\">\n              <li className={this.state.homeVal} style={{margin:\"auto\"}}><Link to=\"/\" onClick={() => {this.updateValue(\"\")}}>Home</Link></li>\n              <li className={this.state.profileVal}><Link to=\"profile\" onClick={() => {this.updateValue(\"profile\")}}>Memory Album</Link></li>\n              <li className={this.state.chatVal}><Link to=\"chat\" onClick={() => {this.updateValue(\"chatting\")}}>Settings</Link></li>\n              <li><Link to=\"login\" onClick={() => {this.updateValue(\"logout\")}}>Logout</Link></li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport NavBar from './components/NavBar'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <NavBar />\r\n  </BrowserRouter>,\r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}